<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function ($scope, spUtil, $location, spAriaFocusManager) {
    /* This is the original code copied from the data table widget */
    $scope.$on('data_table.click', function(e, parms){
        var p = $scope.data.page_id || 'form';
        var s = {id: p, table: parms.table, sys_id: parms.sys_id, view: 'sp'};
        var newURL = $location.search(s);
        spAriaFocusManager.navigateToLink(newURL.url());
    });

    /* Here is our code. We are just defining the "showTable" property for $scope. Defaulting to false. */
    $scope.showTable = false;
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description>Embeds the data table and donut chart in a single widget</description>
        <docs/>
        <field_list>table,filter,field_list,maximum_entries,order_by,order_direction,title,color,glyph,sp_page,display_field</field_list>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Combined Donut and Table</name>
        <option_schema>[{"hint":"Size of the \"donut hole,\" default is 50%","name":"donut_cutout_percent","section":"Presentation","label":"Donut Cutout Percent","type":"integer"},{"hint":"Percent of a circle the chart should consume. Min 25%","name":"arc_percent","section":"Presentation","label":"Arc Percent","type":"integer"},{"hint":"Percentage to rotate the chart from 0 degrees vertical","name":"rotation_offset","section":"Presentation","label":"Rotation Offset","type":"integer"},{"hint":"Number of milliseconds it takes to animate the chart","name":"animation_speed","section":"Presentation","label":"Animation Speed","type":"choice","choices":[{"label":"0","value":"0"},{"label":"500","value":"500"},{"label":"750","value":"750"},{"label":"1000","value":"1000"},{"label":"1250","value":"1250"},{"label":"1500","value":"1500"}]},{"hint":"Identify the page to target when the chart is clicked. Default is \"list\"","name":"target_page","section":"Behavior","label":"Target Page","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function(){
    /*  "use strict"; - linter issues */
    
    /* Most of the following server script comes from the out-of-the-box data table widget */
    
    // populate the 'data' object
    var sp_page = $sp.getValue('sp_page');
	// After moving to scoped application, getValue does not get anything for page. Use getParameter
	if (!sp_page){
		sp_page = $sp.getParameter('id');
	}
    var pageGR = new GlideRecord('sp_page');
    pageGR.get(sp_page);
    data.page_id = pageGR.id.getDisplayValue();
    $sp.getValues(data);
    if (data.field_list) {
        data.fields_array = data.field_list.split(',');
    } else {
        data.field_list = $sp.getListColumns(data.table);
    }

    data.display_field = $sp.getValue('display_field');

    if (input) {
        data.p = input.p;
        data.o = input.o;
        data.d = input.d;
        data.q = input.q;
    }
    data.p = data.p || 1;
    data.o = data.o || $sp.getValue('order_by');
    data.d = data.d || $sp.getValue('order_direction');

    data.page_index = (data.p - 1);
    data.window_size = $sp.getValue('maximum_entries') || 10;
    data.window_start  = (data.page_index * data.window_size);
    data.window_end = (((data.page_index + 1) * data.window_size));
    data.filter = $sp.getValue("filter");

    var gr = new GlideRecordSecure(data.table);
    if (!gr.isValid()) {
        data.invalid_table = true;
        data.table_label = data.table;
        return;
    }
    data.table_label = gr.getLabel();

    // This is where our code begins.
    // First we will build an object to feed in the options for our data table widget.
    // The options we define for this widget instance are a combination of the options needed for the data table and donut chart
    var widgetParams = {
        table: data.table,
        fields: data.field_list,
        o: data.o,
        d: data.d,
        filter: data.filter,
        window_size: data.window_size,
        view: 'sp',
        title: options.title,
        show_breadcrumbs: true
    };
    
    // Now we will use the server-side getWidget method to get a data table widget we can embed
    data.dataTableWidget = $sp.getWidget('widget-data-table', widgetParams);

    // We will do the same for the donut chart widget. Build an object to feed in the options
    var donutParms = {
        table: data.table,
        filter: data.filter,
        display_field: data.display_field
    };

    // Copy options from the current widget instance to feed into our embedded widget
    for (var opt in options){
        donutParms[opt] = options[opt];
    }
	
    // Now get the donut chart widget to embed
    data.donutWidget = $sp.getWidget('donut-chart-20',donutParms);
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>nicholas.yancer</sys_created_by>
        <sys_created_on>2019-04-02 15:01:28</sys_created_on>
        <sys_id>a58ca3350f2477404e0b489ce1050e23</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Combined Donut and Table</sys_name>
        <sys_package display_value="CreatorCon Lab - Single Page Apps" source="x_10227_creatorcon">cfea0f7d0fec37404e0b489ce1050e87</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreatorCon Lab - Single Page Apps">cfea0f7d0fec37404e0b489ce1050e87</sys_scope>
        <sys_update_name>sp_widget_a58ca3350f2477404e0b489ce1050e23</sys_update_name>
        <sys_updated_by>nicholas.yancer</sys_updated_by>
        <sys_updated_on>2019-04-02 15:49:55</sys_updated_on>
        <template><![CDATA[<div>
  <div class="alert alert-danger" ng-if="data.invalid_table">
    ${Table not defined} '{{data.table_label}}'
  </div>
  <!-- Toggle between chart and table view. The toggle will set the value of the showTable variable to true or false when clicked. Notice that we are binding the watchVar scope property in our directive to the current scope's showTable property through the watch-var attribute. -->
  <toggle-switch watch-var="showTable" title="Chart or Table" label-true="Table" label-false="Chart"></toggle-switch>
  <!-- If showTable is false, show the chart. Note the use of ng-if here. The angular chartJS code checks on the chart at regular intervals.
        If the chart canvas is hidden when that check is performed there is an error and the next time you try to show the chart it will not render correctly. -->
  <div ng-if="!showTable">
    <sp-widget ng-if="!!data.donutWidget" widget="data.donutWidget"></sp-widget>
  </div>

  <!-- If showTable is true, then show the data table widget. Note that it is okay to use ng-show here,
    as there is no requirement that the data table is visible for other processes. -->
  <div ng-show="showTable">
    <sp-widget ng-if="data.dataTableWidget" widget="data.dataTableWidget"></sp-widget>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
